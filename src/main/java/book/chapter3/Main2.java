/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package book.chapter3;

import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.IdGenerator;

/**
 *
 * @author denys
 */
public class Main2 {
    
    
    /*
    The way the IdGenerator works is that each member claims a segment of 1 million IDs to generate. This
    is done behind the scenes by using an IAtomicLong. A segment is claimed by incrementing that
    IAtomicLong by 10000. After claiming the segment, the IdGenerator can increment a local counter. Once
    all IDs in the segment are used, it will claim a new segment. The result of this approach is that only 1 in
    10000 times is network traffic needed; 9999 out of 10000, the ID generation can be done in memory
    and therefore is extremely fast    
    
    
    
    - IDs generated by different members will be out of order.
    - If a member goes down without fully using its segment, there might be gaps.
       Also. java.util.UUID could be used 
    */    
    public static void main(String[] args){
        HazelcastInstance client = Hazelcast.newHazelcastInstance();
        IdGenerator idGenerator = client.getIdGenerator("id");
        for (int i = 0; i < 1000; i++) {
            long id = idGenerator.newId();
            System.out.println("id=" + id);
        }        
    }
    
}
